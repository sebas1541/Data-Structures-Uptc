package co.edu.uptc.client.view;

import co.edu.uptc.client.net.Request;
import co.edu.uptc.client.net.Response;
import co.edu.uptc.client.net.TransactionData;
import co.edu.uptc.client.presenter.ClientPresenter;
import com.google.gson.Gson;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class TransactionView {
    private ClientPresenter presenter;
    private Gson gson;

    public TransactionView(ClientPresenter presenter) {
        this.presenter = presenter;
        this.gson = new Gson();
    }

    public void display() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Transaction Menu:\n1. Add Transaction\n2. View Transactions\n3. Edit Transaction\n4. Delete Transaction\n5. Back");
        String option = scanner.nextLine();

        try {
            switch (option) {
                case "1":
                    addTransaction();
                    break;
                case "2":
                    viewTransactions();
                    break;
                case "3":
                    listTransactionsForEdit();
                    break;
                case "4":
                    listTransactionsForDelete();
                    break;
                case "5":
                    presenter.getLoginView().display();
                    break;
                default:
                    showMessage("Invalid option. Try again.");
                    display();
                    break;
            }
        } catch (IOException e) {
            showMessage("Error: " + e.getMessage());
        }
    }

    private void addTransaction() throws IOException {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter amount: ");
        double amount = Double.parseDouble(scanner.nextLine());

        System.out.print("Enter description: ");
        String description = scanner.nextLine();

        System.out.print("Enter type (income/expense): ");
        String type = scanner.nextLine();

        // Get the current date and time
        String dateTime = java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

        // Display predefined categories
        System.out.println("Select a category:");
        System.out.println("1. Alimentaci贸n");
        System.out.println("2. Transporte");
        System.out.println("3. Vivienda");
        System.out.println("4. Salud");
        System.out.println("5. Entretenimiento");
        System.out.println("6. Ropa y Calzado");
        System.out.println("7. Otros Gastos");
        String category = "";
        switch (scanner.nextLine()) {
            case "1":
                category = "Alimentaci贸n";
                break;
            case "2":
                category = "Transporte";
                break;
            case "3":
                category = "Vivienda";
                break;
            case "4":
                category = "Salud";
                break;
            case "5":
                category = "Entretenimiento";
                break;
            case "6":
                category = "Ropa y Calzado";
                break;
            case "7":
                category = "Otros Gastos";
                break;
            default:
                showMessage("Invalid category. Try again.");
                display();
                return;
        }

        // Create a TransactionData object and set the values
        TransactionData transactionData = new TransactionData(
                presenter.getLoginView().getCurrentUser().getUsername(), // Ensure this fetches the correct identifier
                null, // Transaction ID will be generated by the server
                amount,
                dateTime,
                category,
                description,
                type
        );

        String transactionDataJson = gson.toJson(transactionData);
        Request request = new Request("addTransaction", transactionDataJson);
        presenter.getConnection().sendRequest(request);
        Response response = presenter.getConnection().receiveResponse();
        showMessage(response.getData());
        display();
    }

    private void viewTransactions() throws IOException {
        String userId = presenter.getLoginView().getCurrentUser().getUsername(); // Ensure this fetches the correct identifier
        Request request = new Request("viewTransactions", userId);
        presenter.getConnection().sendRequest(request);
        Response response = presenter.getConnection().receiveResponse();

        if ("success".equals(response.getStatus())) {
            TransactionData[] transactions = gson.fromJson(response.getData(), TransactionData[].class);
            for (TransactionData transaction : transactions) {
                System.out.println(transaction);
            }
        } else {
            showMessage("Error: " + response.getData());
        }
        display();
    }

    private void listTransactionsForEdit() throws IOException {
        String userId = presenter.getLoginView().getCurrentUser().getUsername(); // Ensure this fetches the correct identifier
        Request request = new Request("listTransactions", userId);
        presenter.getConnection().sendRequest(request);
        Response response = presenter.getConnection().receiveResponse();

        if ("success".equals(response.getStatus())) {
            System.out.println(response.getData()); // Print transaction list
            editTransaction(response.getData()); // Call editTransaction after listing
        } else {
            showMessage("Error: " + response.getData());
        }
    }

    private void listTransactionsForDelete() throws IOException {
        String userId = presenter.getLoginView().getCurrentUser().getUsername(); // Ensure this fetches the correct identifier
        Request request = new Request("listTransactions", userId);
        presenter.getConnection().sendRequest(request);
        Response response = presenter.getConnection().receiveResponse();

        if ("success".equals(response.getStatus())) {
            System.out.println(response.getData()); // Print transaction list
            deleteTransaction(response.getData()); // Call deleteTransaction after listing
        } else {
            showMessage("Error: " + response.getData());
        }
    }

    private void editTransaction(String transactionsList) throws IOException {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter transaction number to edit: ");
        int transactionNumber = Integer.parseInt(scanner.nextLine());

        // Parse transactions list to map transaction number to transaction ID
        Map<Integer, String> transactionMap = parseTransactionList(transactionsList);

        // Retrieve transaction ID based on transactionNumber, handle invalid selection
        if (!transactionMap.containsKey(transactionNumber)) {
            showMessage("Invalid transaction number. Try again.");
            display();
            return;
        }
        String transactionId = transactionMap.get(transactionNumber);

        System.out.print("Enter new amount: ");
        double amount = Double.parseDouble(scanner.nextLine());

        System.out.print("Enter new description: ");
        String description = scanner.nextLine();

        System.out.print("Enter new type (income/expense): ");
        String type = scanner.nextLine();

        // Get the current date and time
        String dateTime = java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

        // Display predefined categories
        System.out.println("Select a new category:");
        System.out.println("1. Alimentaci贸n");
        System.out.println("2. Transporte");
        System.out.println("3. Vivienda");
        System.out.println("4. Salud");
        System.out.println("5. Entretenimiento");
        System.out.println("6. Ropa y Calzado");
        System.out.println("7. Otros Gastos");
        String category = "";
        switch (scanner.nextLine()) {
            case "1":
                category = "Alimentaci贸n";
                break;
            case "2":
                category = "Transporte";
                break;
            case "3":
                category = "Vivienda";
                break;
            case "4":
                category = "Salud";
                break;
            case "5":
                category = "Entretenimiento";
                break;
            case "6":
                category = "Ropa y Calzado";
                break;
            case "7":
                category = "Otros Gastos";
                break;
            default:
                showMessage("Invalid category. Try again.");
                display();
                return;
        }

        // Create a TransactionData object and set the values
        TransactionData transactionData = new TransactionData(
                presenter.getLoginView().getCurrentUser().getUsername(),
                transactionId,
                amount,
                dateTime,
                category,
                description,
                type
        );

        String transactionDataJson = gson.toJson(transactionData);
        Request request = new Request("editTransaction", transactionDataJson);
        presenter.getConnection().sendRequest(request);
        Response response = presenter.getConnection().receiveResponse();
        showMessage(response.getData());
        display();
    }

    private void deleteTransaction(String transactionsList) throws IOException {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter transaction number to delete: ");
        int transactionNumber = Integer.parseInt(scanner.nextLine());

        // Parse transactions list to map transaction number to transaction ID
        Map<Integer, String> transactionMap = parseTransactionList(transactionsList);

        // Retrieve transaction ID based on transactionNumber, handle invalid selection
        if (!transactionMap.containsKey(transactionNumber)) {
            showMessage("Invalid transaction number. Try again.");
            display();
            return;
        }
        String transactionId = transactionMap.get(transactionNumber);

        String userId = presenter.getLoginView().getCurrentUser().getUsername();
        String requestData = userId + "," + transactionId; // Correct transactionId in requestData
        Request request = new Request("deleteTransaction", requestData);
        presenter.getConnection().sendRequest(request);
        Response response = presenter.getConnection().receiveResponse();
        showMessage(response.getData());
        display();
    }

    private Map<Integer, String> parseTransactionList(String transactionsList) {
        Map<Integer, String> transactionMap = new HashMap<>();
        String[] transactions = transactionsList.split("\n");
        for (String transaction : transactions) {
            String[] parts = transaction.split(": Transaction");
            if (parts.length == 2) {
                int number = Integer.parseInt(parts[0].trim());
                String transactionId = parts[1].split(",")[0].split("=")[1].replace("'", "").trim();
                transactionMap.put(number, transactionId);
            }
        }
        return transactionMap;
    }

    public void showMessage(String message) {
        System.out.println(message);
    }
}
